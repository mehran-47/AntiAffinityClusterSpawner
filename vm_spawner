#!/usr/bin/env python
from pexpect import spawn
from subprocess import Popen, PIPE, call
from threading import Thread
import sys, time, json, os


class VMSpawner():
	def __init__(self, floatingIpPool):
		self.floatingIpPool = floatingIpPool

	def is_active_after_boot(self, vmname):
		command = Popen(['nova','list'], stdout=PIPE)
		outputList = [line for line in command.stdout]
		for entry in outputList[3:-1]:
			if entry.split('|')[2].strip()==vmname:
				return 'ACTIVE'== entry.split('|')[3].strip()
		return False

	def get_vm_names(self):
		command = Popen(['nova','list'], stdout=PIPE)
		outputList = [line for line in command.stdout]
		return [entry.split('|')[2].strip() for entry in outputList[3:-1]]
			
	def boot_with_snapshot(self, aVMConfig, configDumpFile, timeout=300):
		snapshot, vmname, antiAffinityGroupName, flavor, username, pw =\
		 aVMConfig['source_snapshot'], aVMConfig['openStackVMname'], aVMConfig['groupname'], aVMConfig['flavor'], aVMConfig['username'], aVMConfig['password']
		if vmname in self.get_vm_names():
			print('VM %s already exists. Please provide unique VM name to boot.' %(vmname))
			return
		command = Popen(['nova','boot','--flavor',flavor,'--image', snapshot, vmname, '--hint', 'group='+antiAffinityGroupName])
		while timeout>0 and not self.is_active_after_boot(vmname):
			time.sleep(2)
			timeout-=3
		if self.is_active_after_boot(vmname):
			print('%s created successfully' %(vmname))
			floatingIp = self.floatingIpPool.pop(0)
			call(['nova', 'add-floating-ip', vmname, floatingIp])
			self.push_updates(username, floatingIp, pw, configDumpFile)
		else:
			print('%s is taking longer than usual (~5 minutes) to boot; consider troubleshooting. Customization of %s is halted' %(vmname, vmname))

	def send_files(self, user, ip, pw, files):
		for aFile in files:
			child_scp = spawn('scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no '+aFile.split('/')[-1]+' '+user+'@'+ip+':'+aFile)
			child_scp.expect(user+"@"+ip+"'s password:")
			child_scp.sendline(pw)

	def execute_commands_at(self, user, ip, pw, commands):
		child_shell = spawn('ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no '+user+'@'+ip)
		child_shell.expect(user+"@"+ip+"'s password:")
		child_shell.sendline(pw)
		for command in commands:
			child_shell.sendline(command)
		for line in child:
			pass
			
	def push_updates(self, user, ip, pw, configFile):
		self.send_files(user, ip, pw, ['/home/node1/updates.py', '/home/node1/'+configFile])
		self.execute_commands_at(user, ip, pw, ['echo '+ pw + ' | sudo -S python3 /home/node1/updates.py '+configFile])

		
if __name__=='__main__':
	if os.path.exists(os.getcwd()+'/config.json'):
		with open('config.json', 'r') as f:
			mainConfig = json.loads(f.read())	
		vms = VMSpawner(mainConfig['floating_ip_pool'])
		for anAntiAffinityGroup in mainConfig['anti_affinity_groups']:
			call(['nova', 'server-group-create', anAntiAffinityGroup, 'anti-affinity'])
		for aVMConfig in mainConfig['vm_configs']:
			indexVal = str(mainConfig['vm_configs'].index(aVMConfig))
			with open('vm_config_'+indexVal+'.json', 'w+') as fw: fw.write(json.dumps(aVMConfig, indent=4))
			Thread(target=vms.boot_with_snapshot, args=(aVMConfig, 'vm_config_'+indexVal+'.json')).start()
			time.sleep(1)		

	'''
	if sys.argv[2:]:
		for i in range(int(sys.argv[1]),int(sys.argv[2])):
			Thread(target=boot_with_snapshot, args=('AntiAffinityVMsnapshot_1', 'AF_VM_'+str(i), 'testAntiAffinityServerGrp_0')).start()
			time.sleep(1)
	'''
